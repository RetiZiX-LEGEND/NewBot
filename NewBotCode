import os
import discord
from discord.ext import commands
import random
import requests
from googletrans import Translator

bot = commands.Bot(intents=discord.Intents.all(), command_prefix="/")

@bot.command("information")
async def command_information(ctx: commands.Context):
    await ctx.send("–Ø –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Çüòä")

@bot.command("menu")
async def menu(ctx: commands.Context):
    menu_message = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n"
        "1. –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ (–æ—Ç 1 –¥–æ 10): /guess\n"
        "2. –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞: /rps\n"
        "3. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (—Å–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ): /calculator\n"
        "4. –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ: /guessword\n"
        "5. –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞: /mem\n"
        "6. –†–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: /duck\n"
        "7. –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç: /advice\n"
    )
    await ctx.send(menu_message)

@bot.command("guess")
async def guess(ctx: commands.Context):
    number = random.randint(1, 10)
    await ctx.send("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å!")

    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel and m.content.isdigit()

    guess = await bot.wait_for('message', check=check)
    guess_number = int(guess.content)

    if guess_number == number:
        await ctx.send(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {number}.")
    else:
        await ctx.send(f"–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ {number}.")

@bot.command("rps")
async def rps(ctx: commands.Context):
    await ctx.send("–ò–≥—Ä–∞–µ–º –≤ –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞.")

    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel and m.content.lower() in ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']

    user_choice = await bot.wait_for('message', check=check)
    user_choice = user_choice.content.lower()
    bot_choice = random.choice(['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'])

    if user_choice == bot_choice:
        result = "–ù–∏—á—å—è!"
    elif (user_choice == '–∫–∞–º–µ–Ω—å' and bot_choice == '–Ω–æ–∂–Ω–∏—Ü—ã') or \
         (user_choice == '–Ω–æ–∂–Ω–∏—Ü—ã' and bot_choice == '–±—É–º–∞–≥–∞') or \
         (user_choice == '–±—É–º–∞–≥–∞' and bot_choice == '–∫–∞–º–µ–Ω—å'):
        result = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
    else:
        result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"

    await ctx.send(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}\n{result}")

@bot.command("calculator")
async def calculator(ctx: commands.Context):
    await ctx.send("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2+2 –∏–ª–∏ 5-3):")

    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel

    expression = await bot.wait_for('message', check=check)
    try:
        result = eval(expression.content, {"__builtins__": None}, {})
        await ctx.send(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        await ctx.send("–û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2+2 –∏–ª–∏ 5-3.")

@bot.command("guessword")
async def guessword(ctx: commands.Context):
    words = ['—è–±–ª–æ–∫–æ', '–±–∞–Ω–∞–Ω', '–∞–ø–µ–ª—å—Å–∏–Ω', '–≥—Ä—É—à–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥']
    bot_word = random.choice(words)
    await ctx.send(f"–Ø –∑–∞–≥–∞–¥–∞–ª –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ª–æ–≤: {', '.join(words)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å!")

    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel and m.content.lower() in words

    guess = await bot.wait_for('message', check=check)
    user_word = guess.content.lower()

    if user_word == bot_word:
        await ctx.send(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ {bot_word}.")
    else:
        await ctx.send(f"–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ {bot_word}.")

@bot.command("mem")
async def mem(ctx: commands.Context):
    images = os.listdir("images")
    selected_image = random.choice(images)
    with open(f"images/{selected_image}", "rb") as file:
        image = discord.File(file)
    await ctx.send("–õ–æ–≤–∏ –º–µ–º—á–∏–∫!", file=image)

def get_duck_image_url():    
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']

@bot.command('duck')
async def duck(ctx):
    '''–ü–æ –∫–æ–º–∞–Ω–¥–µ duck –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_duck_image_url'''
    image_url = get_duck_image_url()
    await ctx.send(image_url)

@bot.command("advice")
async def advice(ctx: commands.Context):
    '''–ü–æ –∫–æ–º–∞–Ω–¥–µ advice –≤—ã–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –∏–∑ API –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π'''
    url = 'https://api.adviceslip.com/advice'
    res = requests.get(url)
    data = res.json()
    advice_text = data['slip']['advice']

    translator = Translator()
    translated_advice = translator.translate(advice_text, dest='ru').text

    await ctx.send(f"–°–æ–≤–µ—Ç: {translated_advice}")

bot.run("–ö–æ–¥ –ø—Ä–∏—à–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å")
